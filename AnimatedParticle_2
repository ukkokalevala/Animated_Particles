#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
#define SOUND_SENSOR_PIN 4

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

struct Particle {
  float x, y;
  float vx, vy;
  float frequency;
  float amplitude;
};

const int numParticles = 20;
Particle particles[numParticles];

void setup() {
  Serial.begin(115200);
  Wire.begin(7, 6);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  display.display();
  delay(2000);
  display.clearDisplay();

  // Initialize particles
  for (int i = 0; i < numParticles; i++) {
    particles[i].x = random(0, SCREEN_WIDTH);
    particles[i].y = random(0, SCREEN_HEIGHT);
    particles[i].vx = random(-2, 2);
    particles[i].vy = random(-2, 2);
    particles[i].frequency = random(1, 10) * 0.1;
    particles[i].amplitude = random(5, 20);
  }
}

void loop() {
  int soundValue = analogRead(SOUND_SENSOR_PIN);
  float soundLevel = map(soundValue, 0, 4095, 0, 100) / 100.0;

  display.clearDisplay();

  for (int i = 0; i < numParticles; i++) {
    // Update particle position based on frequency and sound level
    particles[i].x += particles[i].vx * particles[i].frequency * soundLevel;
    particles[i].y += particles[i].vy * particles[i].frequency * soundLevel;

    // Bounce off the edges
    if (particles[i].x < 0 || particles[i].x > SCREEN_WIDTH) particles[i].vx *= -1;
    if (particles[i].y < 0 || particles[i].y > SCREEN_HEIGHT) particles[i].vy *= -1;

    // Draw particle
    display.fillCircle(particles[i].x, particles[i].y, 2, SSD1306_WHITE);
  }

  display.display();
  delay(10);
}
